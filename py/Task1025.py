# 爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。

# 最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：

# 选出任一 x，满足 0 < x < N 且 N % x == 0 。
# 用 N - x 替换黑板上的数字 N 。
# 如果玩家无法执行这些操作，就会输掉游戏。

# 只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。

#  

# 示例 1：

# 输入：2
# 输出：true
# 解释：爱丽丝选择 1，鲍勃无法进行操作。
# 示例 2：

# 输入：3
# 输出：false
# 解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。
#  

# 提示：

# 1 <= N <= 1000
from typing import List


def listAllPrime(N: int) -> List[int]:
    isPrime = [False]+[True] * N
    for i in range(2, N + 1):
        if isPrime[i]:
            p = i * 2
            while p <= N:
                isPrime[p] = False
                p += i
    return [i for i in range(N+1) if isPrime[i]]


primes = listAllPrime(1000)
print(len(primes))
print(primes)


class Solution:

    # dp
    def divisorGame(self, N: int) -> bool:
        primes = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
                  449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997
                  ]
        dp = [True] + [False] * N
        for i in range(1, N+1):
            for prime in primes:
                if prime > i:
                    break
                if i % prime == 0 and not dp[i - prime]:
                    dp[i] = not dp[i - prime]
                    break
        return dp[-1]

    # dp
    def divisorGame2(self, N: int) -> bool:
        return N % 2 == 0


obj = Solution()
N = 3
print(obj.divisorGame(N))
